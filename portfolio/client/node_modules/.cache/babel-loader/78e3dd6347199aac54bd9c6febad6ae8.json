{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\portfolio-master\\\\portfolio\\\\src\\\\components\\\\ux-designs\\\\ux-designs.js\";\nimport React, { Component } from \"react\";\nimport Helmet from \"react-helmet\";\nimport ThumbNail from \"../thumbnail/thumbnail\";\nimport LgThumbNail from \"../lg-thumbnail/lg-thumbnail\";\nimport NavBar from \"../navbar/nav-bar\";\nimport \"../../style-sheets/portfolio.css\";\nimport data from \"../../data/ux-data.json\";\nimport FooterNav from \"../footer-nav/footer-nav\";\n\nclass UXDesigns extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getData = data => {\n      //Gets data on specified Thumbnail and sends data to be rendered as Lg-Thumbnail\n      this.setState({\n        selected: 1,\n        dataFromThumbnail: data\n      });\n    };\n\n    this.handleCloseLgThumbnail = update => {\n      console.log(\"from lg-thumbnail\", update);\n      this.setState({\n        selected: update\n      });\n    };\n\n    this.state = {\n      //State holds all UX the data for the <ThumbNail /> component. This is passed as a Prop.\n      selected: 0,\n      dataFromThumbnail: \"\",\n      ux: data\n    };\n  }\n\n  // FIX: <lg-thumbnail /> element rendering issue\n  render() {\n    const {\n      ux,\n      selected,\n      dataFromThumbnail\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Helmet, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 6\n      }\n    }, \"Portfolio - UX Designs\"), /*#__PURE__*/React.createElement(\"meta\", {\n      name: \"description\",\n      content: \"UX designers produced for projects\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 6\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"page-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"page-width\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 6\n      }\n    }, selected ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"header\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(NavBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 10\n      }\n    })), /*#__PURE__*/React.createElement(\"main\", {\n      className: \"main-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 10\n      }\n    }, \"UX Designs\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 10\n      }\n    }, \"2019\"), /*#__PURE__*/React.createElement(LgThumbNail, {\n      dataFromThumbnail: dataFromThumbnail,\n      closeLgThumbnail: this.handleCloseLgThumbnail,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 10\n      }\n    }), /*#__PURE__*/React.createElement(\"section\", {\n      className: \"elements-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 10\n      }\n    }), /*#__PURE__*/React.createElement(\"section\", {\n      className: \"elements-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 10\n      }\n    }, ux.map(ux =>\n    /*#__PURE__*/\n    //data is exported before reaching ThumbNail as ThumbNail will accept data from multiple sources - therefore must be generic.\n    React.createElement(ThumbNail, {\n      key: ux.key,\n      id: ux.id,\n      type: ux.type,\n      img: ux.img,\n      name: ux.name,\n      desc: ux.desc,\n      role: ux.role,\n      tech: ux.tech,\n      challenge: ux.challenge,\n      solution: ux.solution,\n      source: ux.source,\n      getData: this.getData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 12\n      }\n    })))), /*#__PURE__*/React.createElement(FooterNav, {\n      isFooter: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 1\n      }\n    })) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"header\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(NavBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"main\", {\n      className: \"main-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }\n    }, \"UX Designs\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }\n    }, \"2019\"), /*#__PURE__*/React.createElement(\"section\", {\n      className: \"elements-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }\n    }, ux.map(ux =>\n    /*#__PURE__*/\n    //data is exported before reaching ThumbNail as ThumbNail will accept data from multiple sources - therefore must be generic.\n    React.createElement(ThumbNail, {\n      key: ux.key,\n      id: ux.id,\n      type: ux.type,\n      img: ux.img,\n      name: ux.name,\n      desc: ux.desc,\n      role: ux.role,\n      tech: ux.tech,\n      challenge: ux.challenge,\n      solution: ux.solution,\n      source: ux.source,\n      getData: this.getData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }\n    })))), /*#__PURE__*/React.createElement(\"footer\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }\n    }, \"Soon Footer\"))))));\n  }\n\n}\n\nexport default UXDesigns;","map":{"version":3,"sources":["C:/Users/user/Desktop/portfolio-master/portfolio/src/components/ux-designs/ux-designs.js"],"names":["React","Component","Helmet","ThumbNail","LgThumbNail","NavBar","data","FooterNav","UXDesigns","constructor","props","getData","setState","selected","dataFromThumbnail","handleCloseLgThumbnail","update","console","log","state","ux","render","map","key","id","type","img","name","desc","role","tech","challenge","solution","source"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Helmet from \"react-helmet\";\nimport ThumbNail from \"../thumbnail/thumbnail\";\nimport LgThumbNail from \"../lg-thumbnail/lg-thumbnail\";\nimport NavBar from \"../navbar/nav-bar\";\n\nimport \"../../style-sheets/portfolio.css\";\n\nimport data from \"../../data/ux-data.json\";\nimport FooterNav from \"../footer-nav/footer-nav\";\n\nclass UXDesigns extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\t//State holds all UX the data for the <ThumbNail /> component. This is passed as a Prop.\n\t\t\tselected: 0,\n\t\t\tdataFromThumbnail: \"\",\n\t\t\tux: data\n\t\t};\n\t}\n\n\tgetData = data => {\n\t\t//Gets data on specified Thumbnail and sends data to be rendered as Lg-Thumbnail\n\t\tthis.setState({ selected: 1, dataFromThumbnail: data });\n\t};\n\n\thandleCloseLgThumbnail = update => {\n\t\tconsole.log(\"from lg-thumbnail\", update);\n\t\tthis.setState({ selected: update });\n\t};\n\t// FIX: <lg-thumbnail /> element rendering issue\n\trender() {\n\t\tconst { ux, selected, dataFromThumbnail } = this.state;\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Helmet>\n\t\t\t\t\t<title>Portfolio - UX Designs</title>\n\t\t\t\t\t<meta\n\t\t\t\t\t\tname=\"description\"\n\t\t\t\t\t\tcontent=\"UX designers produced for projects\"\n\t\t\t\t\t/>\n\t\t\t\t</Helmet>\n\t\t\t\t<div className=\"page-wrapper\">\n\t\t\t\t\t<div className=\"page-width\">\n\t\t\t\t\t\t{selected ? (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t{/* This is used to render single page items on Pop up or nav dropdown selections*/}\n\t\t\t\t\t\t\t\t<header>\n\t\t\t\t\t\t\t\t\t<NavBar />\n\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t\t\t<main className={\"main-wrapper\"}>\n\t\t\t\t\t\t\t\t\t<h1>UX Designs</h1>\n\t\t\t\t\t\t\t\t\t<h3>2019</h3>\n\t\t\t\t\t\t\t\t\t<LgThumbNail\n\t\t\t\t\t\t\t\t\t\tdataFromThumbnail={\n\t\t\t\t\t\t\t\t\t\t\tdataFromThumbnail\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tcloseLgThumbnail={\n\t\t\t\t\t\t\t\t\t\t\tthis.handleCloseLgThumbnail\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<section\n\t\t\t\t\t\t\t\t\t\tclassName={\"elements-wrapper\"}\n\t\t\t\t\t\t\t\t\t></section>\n\t\t\t\t\t\t\t\t\t<section className={\"elements-wrapper\"}>\n\t\t\t\t\t\t\t\t\t\t{ux.map((ux) => (\n\t\t\t\t\t\t\t\t\t\t\t//data is exported before reaching ThumbNail as ThumbNail will accept data from multiple sources - therefore must be generic.\n\t\t\t\t\t\t\t\t\t\t\t<ThumbNail\n\t\t\t\t\t\t\t\t\t\t\t\tkey={ux.key}\n\t\t\t\t\t\t\t\t\t\t\t\tid={ux.id}\n\t\t\t\t\t\t\t\t\t\t\t\ttype={ux.type}\n\t\t\t\t\t\t\t\t\t\t\t\timg={ux.img}\n\t\t\t\t\t\t\t\t\t\t\t\tname={ux.name}\n\t\t\t\t\t\t\t\t\t\t\t\tdesc={ux.desc}\n\t\t\t\t\t\t\t\t\t\t\t\trole={ux.role}\n\t\t\t\t\t\t\t\t\t\t\t\ttech={ux.tech}\n\t\t\t\t\t\t\t\t\t\t\t\tchallenge={\n\t\t\t\t\t\t\t\t\t\t\t\t\tux.challenge\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tsolution={ux.solution}\n\t\t\t\t\t\t\t\t\t\t\t\tsource={ux.source}\n\t\t\t\t\t\t\t\t\t\t\t\tgetData={this.getData}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</section>\n\t\t\t\t\t\t\t\t</main>\n<FooterNav isFooter={true} />\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t{/* This is used to render large pop modal items on click*/}\n\n\t\t\t\t\t\t\t\t\t<header>\n\t\t\t\t\t\t\t\t\t\t<NavBar />\n\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t\t\t\t<main className={\"main-wrapper\"}>\n\t\t\t\t\t\t\t\t\t\t<h1>UX Designs</h1>\n\t\t\t\t\t\t\t\t\t\t<h3>2019</h3>\n\t\t\t\t\t\t\t\t\t\t<section className={\"elements-wrapper\"}>\n\t\t\t\t\t\t\t\t\t\t\t{ux.map((ux) => (\n\t\t\t\t\t\t\t\t\t\t\t\t//data is exported before reaching ThumbNail as ThumbNail will accept data from multiple sources - therefore must be generic.\n\t\t\t\t\t\t\t\t\t\t\t\t<ThumbNail\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={ux.key}\n\t\t\t\t\t\t\t\t\t\t\t\t\tid={ux.id}\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype={ux.type}\n\t\t\t\t\t\t\t\t\t\t\t\t\timg={ux.img}\n\t\t\t\t\t\t\t\t\t\t\t\t\tname={ux.name}\n\t\t\t\t\t\t\t\t\t\t\t\t\tdesc={ux.desc}\n\t\t\t\t\t\t\t\t\t\t\t\t\trole={ux.role}\n\t\t\t\t\t\t\t\t\t\t\t\t\ttech={ux.tech}\n\t\t\t\t\t\t\t\t\t\t\t\t\tchallenge={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tux.challenge\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tsolution={ux.solution}\n\t\t\t\t\t\t\t\t\t\t\t\t\tsource={ux.source}\n\t\t\t\t\t\t\t\t\t\t\t\t\tgetData={this.getData}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</section>\n\t\t\t\t\t\t\t\t\t</main>\n\t\t\t\t\t\t\t\t\t<footer>\n\t\t\t\t\t\t\t\t\t\t<label>Soon Footer</label>\n\t\t\t\t\t\t\t\t\t</footer>\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</>\n\t\t);\n\t}\n}\n\nexport default UXDesigns;\n"]},"metadata":{},"sourceType":"module"}