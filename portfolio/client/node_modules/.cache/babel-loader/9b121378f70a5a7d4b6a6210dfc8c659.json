{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\portfolio-master\\\\portfolio\\\\src\\\\components\\\\lg-thumbnail\\\\lg-thumbnail.js\";\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./lg-thumbnail.css\";\nimport CarouselControls from \"../carousel-controls/CarouselControls\";\nimport SinglePageItem from \"../single-page-item/SinglePageItem\"; //LG THUMBNAIL to become pop up modal with the following details:\n//Image carosel, controls, desc, my role.\n//Stand alone page component will display all the available information on a item.\n//Stand alone page will be linked too from dropdown list or via \"More...\" button in Lg Thumbnail\n//FIX: clicking more should link to  SPI without setting the ovreflow to hidden (or unsetting the overflow)\n\nclass LgThumbNail extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getData = data => {\n      //Gets data on specified Thumbnail and sends data to be rendered as Lg-Thumbnail\n      const {\n        imgIndex,\n        autoPlay\n      } = data;\n      this.setState({\n        imgIndex,\n        autoPlay\n      });\n    };\n\n    this.descCharLimit = () => {\n      console.log(\"desc in limit\", this.state.desc);\n    };\n\n    this.thumbNailSwitch = () => {\n      console.log(\"onClick\");\n      let selected = this.state.selected;\n\n      if (selected === 0) {\n        selected++; // this.props.getData(this.state); //Send data to SinglePage\n\n        this.setState({\n          selected\n        });\n      } else if (selected === 1) {\n        selected--;\n        this.setState({\n          selected\n        });\n      }\n\n      console.log(\"Selected\", this.state.selected);\n    };\n\n    this.state = {\n      selected: 0,\n      //if \"more...\" is clicked then render stand alone page\n      imgIndex: 0,\n      autoPlay: \"\",\n      img: this.props.img\n    };\n  }\n\n  componentDidMount() {\n    const body = document.querySelector(\"body\");\n    body.style.setProperty(\"overflow\", \"hidden\");\n  }\n\n  componentWillUnmount() {\n    const body = document.querySelector(\"body\");\n    body.style.setProperty(\"overflow\", \"\");\n  }\n\n  render() {\n    const {\n      imgIndex,\n      selected\n    } = this.state;\n    const {\n      id,\n      type,\n      name,\n      img,\n      desc,\n      role,\n      tech,\n      challenge,\n      solution,\n      source\n    } = this.props.dataFromThumbnail;\n    console.log(\"LG thumbnail\", this.state.selected, this.props);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, !selected ? /*#__PURE__*/React.createElement(\"template\", {\n      id: \"myModal\",\n      className: \"modal\",\n      onClick: e => e.target.style.setProperty(\"display\", \"none\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"lg-thumbnail-page-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"lg-thumbnail-button\",\n      onClick: () => this.props.closeLgThumbnail(0),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }\n    }, \"x\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"lg-thumbnail-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"lg-thumbnail-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 10\n      }\n    }, name), /*#__PURE__*/React.createElement(\"img\", {\n      src: img[imgIndex],\n      className: \"lg-thumbnail-img\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 10\n      }\n    }), img.length > 1 ? /*#__PURE__*/React.createElement(CarouselControls, {\n      getData: this.getData,\n      img: this.props.dataFromThumbnail.img,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }\n    }) : null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"lg-thumbnail-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 10\n      }\n    }, desc ? /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }\n    }, \"Description:\"), \" \", desc) : null, role ? /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }\n    }, \"Role:\"), \" \", role) : null, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      onClick: this.thumbNailSwitch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: `/${type}/${id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }\n    }, \"More ...\")))))))) : /*#__PURE__*/React.createElement(React.Fragment, null, \"//This is replaces the pop up which means the other items that aren't selected will still be displayed. This in effect still replaces the original thumbnail\", /*#__PURE__*/React.createElement(SinglePageItem // if selected return SinglePageItem\n    , {\n      key: id,\n      img: img,\n      name: name,\n      desc: desc,\n      role: role,\n      tech: tech,\n      challenge: challenge,\n      solution: solution,\n      source: source,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 7\n      }\n    })));\n  }\n\n}\n\nexport default LgThumbNail;","map":{"version":3,"sources":["C:/Users/user/Desktop/portfolio-master/portfolio/src/components/lg-thumbnail/lg-thumbnail.js"],"names":["React","Component","Link","CarouselControls","SinglePageItem","LgThumbNail","constructor","props","getData","data","imgIndex","autoPlay","setState","descCharLimit","console","log","state","desc","thumbNailSwitch","selected","img","componentDidMount","body","document","querySelector","style","setProperty","componentWillUnmount","render","id","type","name","role","tech","challenge","solution","source","dataFromThumbnail","e","target","closeLgThumbnail","length"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./lg-thumbnail.css\";\nimport CarouselControls from \"../carousel-controls/CarouselControls\";\nimport SinglePageItem from \"../single-page-item/SinglePageItem\";\n\n//LG THUMBNAIL to become pop up modal with the following details:\n//Image carosel, controls, desc, my role.\n//Stand alone page component will display all the available information on a item.\n//Stand alone page will be linked too from dropdown list or via \"More...\" button in Lg Thumbnail\n\n//FIX: clicking more should link to  SPI without setting the ovreflow to hidden (or unsetting the overflow)\n\nclass LgThumbNail extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tselected: 0, //if \"more...\" is clicked then render stand alone page\n\t\t\timgIndex: 0,\n\t\t\tautoPlay: \"\",\n\t\t\timg: this.props.img,\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tconst body = document.querySelector(\"body\");\n\t\tbody.style.setProperty(\"overflow\", \"hidden\");\n\t}\n\n\tcomponentWillUnmount() {\n\t\tconst body = document.querySelector(\"body\");\n\t\tbody.style.setProperty(\"overflow\", \"\");\n\t}\n\n\tgetData = (data) => {\n\t\t//Gets data on specified Thumbnail and sends data to be rendered as Lg-Thumbnail\n\t\tconst { imgIndex, autoPlay } = data;\n\t\tthis.setState({ imgIndex, autoPlay });\n\t};\n\t//DELETE? is this code doing anything?\n\n\tdescCharLimit = () => {\n\t\tconsole.log(\"desc in limit\", this.state.desc);\n\t};\n\n\t//DELETE? is this code doing anything?\n\tthumbNailSwitch = () => {\n\t\tconsole.log(\"onClick\");\n\t\tlet selected = this.state.selected;\n\n\t\tif (selected === 0) {\n\t\t\tselected++;\n\t\t\t// this.props.getData(this.state); //Send data to SinglePage\n\t\t\tthis.setState({ selected });\n\t\t} else if (selected === 1) {\n\t\t\tselected--;\n\t\t\tthis.setState({ selected });\n\t\t}\n\n\t\tconsole.log(\"Selected\", this.state.selected);\n\t};\n\n\trender() {\n\t\tconst { imgIndex, selected } = this.state;\n\t\tconst {\n\t\t\tid,\n\t\t\ttype,\n\t\t\tname,\n\t\t\timg,\n\t\t\tdesc,\n\t\t\trole,\n\t\t\ttech,\n\t\t\tchallenge,\n\t\t\tsolution,\n\t\t\tsource,\n\t\t} = this.props.dataFromThumbnail;\n\t\tconsole.log(\"LG thumbnail\", this.state.selected, this.props);\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{!selected ? (\n\t\t\t\t\t<template id=\"myModal\" className=\"modal\" onClick={(e) => e.target.style.setProperty(\"display\", \"none\")}>\n\t\t\t\t\t\t<div className=\"modal-content\">\n\t\t\t\t\t\t\t<div className={\"lg-thumbnail-page-wrapper\"}>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tclassName={\"lg-thumbnail-button\"}\n\t\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\t\tthis.props.closeLgThumbnail(0)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{\"x\"}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<div className=\"lg-thumbnail-wrapper\">\n\t\t\t\t\t\t\t\t\t<h1 className={\"lg-thumbnail-title\"}>\n\t\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tsrc={img[imgIndex]}\n\t\t\t\t\t\t\t\t\t\tclassName={\"lg-thumbnail-img\"}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t{img.length > 1 ? (\n\t\t\t\t\t\t\t\t\t\t<CarouselControls\n\t\t\t\t\t\t\t\t\t\t\tgetData={this.getData}\n\t\t\t\t\t\t\t\t\t\t\timg={\n\t\t\t\t\t\t\t\t\t\t\t\tthis.props.dataFromThumbnail.img\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t\t\t\t<div className=\"lg-thumbnail-info\">\n\t\t\t\t\t\t\t\t\t\t{desc ? (\n\t\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t\t<strong>Description:</strong>{\" \"}\n\t\t\t\t\t\t\t\t\t\t\t\t{desc}\n\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t\t\t\t\t{role ? (\n\t\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t\t<strong>Role:</strong> {role}\n\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t\t\t\t\t<b>\n\t\t\t\t\t\t\t\t\t\t\t<i onClick={this.thumbNailSwitch}>\n\t\t\t\t\t\t\t\t\t\t\t\t<Link to={`/${type}/${id}`}>\n\t\t\t\t\t\t\t\t\t\t\t\t\tMore ...\n\t\t\t\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t\t\t\t</i>\n\t\t\t\t\t\t\t\t\t\t</b>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</template>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t//This is replaces the pop up which means the other\n\t\t\t\t\t\titems that aren't selected will still be displayed. This\n\t\t\t\t\t\tin effect still replaces the original thumbnail\n\t\t\t\t\t\t<SinglePageItem\n\t\t\t\t\t\t\t// if selected return SinglePageItem\n\t\t\t\t\t\t\tkey={id}\n\t\t\t\t\t\t\timg={img}\n\t\t\t\t\t\t\tname={name}\n\t\t\t\t\t\t\tdesc={desc}\n\t\t\t\t\t\t\trole={role}\n\t\t\t\t\t\t\ttech={tech}\n\t\t\t\t\t\t\tchallenge={challenge}\n\t\t\t\t\t\t\tsolution={solution}\n\t\t\t\t\t\t\tsource={source}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</>\n\t\t);\n\t}\n}\n\nexport default LgThumbNail;\n"]},"metadata":{},"sourceType":"module"}